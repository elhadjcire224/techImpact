// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  USER
  MENTOR
  ADMIN
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  name                String?
  image               String?
  phone               String?
  cvPath              String?
  github              String?
  portfolio           String?
  bio                 String?
  onboardingCompleted Boolean   @default(false)
  role                Role      @default(USER)
  updatedAt           DateTime  @updatedAt
  emailVerified       DateTime?
  createdAt           DateTime  @default(now())

  // Relations
  ideas          Idea[]
  comments       Comment[]
  likes          IdeaLike[]
  accounts       Account[]
  sessions       Session[]
  mentorRequests MentorRequest[]

  @@map("users")
}

model Idea {
  id              String   @id @default(cuid())
  title           String
  description     String   @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tags            String[]
  status          String   @default("En discussion")
  mentorValidated Boolean  @default(false)

  // Relations
  author   User       @relation(fields: [authorId], references: [id])
  authorId String
  comments Comment[]
  likes    IdeaLike[]

  @@map("ideas")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  idea     Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId   String

  @@map("comments")
}

model IdeaLike {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  idea      Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId    String
  createdAt DateTime @default(now())

  @@id([userId, ideaId])
  @@map("idea_likes")
}

model MentorRequest {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mentor_requests")
}
